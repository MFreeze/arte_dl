#!/bin/bash

# General informations
PREFIX="http://videos.arte.tv"
TMP_FILE=/tmp/arte_urls
TMP_FORMAT_FILE=/tmp/arte_format_urls
DL_DIR=/home/mfreeze/arte_videos
LOOP=1

# General videos informations
declare -a VID_title
declare -a VID_urls
declare -a VID_desc
declare -a VID_date

CUR_TITLE=""
VID_empty=1
VID_numb=0

# Videos formats informations
declare -a FORM_title
declare -a FORM_urls
declare -a FORM_location
declare -a FORM_app

FORM_empty=1
FORM_numb=0

###################################################
# GENERAL VIDEOS FUNCTION :
# * create_array (create all te arrays containing important informations)
# * update_array (update arrays of informations)
# * print_choice_list (prints Names and description of videos of Arte+7)

function create_array() {
if (( $VID_empty )); then
    local index=1
    wget  "${PREFIX}$(wget  -q -O - http://videos.arte.tv/fr/videos\
    |grep XmlUrl |cut -d "\"" -f2)" -O- -q |\
    grep -EA1 "<(teaserText|targetUrl|title|endDate)>" |\
    grep -vE "(startDate|--$)"  > $TMP_FILE
    while read line; do 
        if [[ $line =~ "<title>" ]]; then
            read line 
            line=$(echo $line | sed 's/\(&#39;\| \)/_/g')
            VID_title[$index]="$line"
            CUR_TITLE="$line"
            # echo "$(( $index + 1 )). ${VID_title[$index]}"
        elif [[ $line =~ teaserText ]]; then
            read line
            VID_desc[$index]="$line"
            # echo -e "\t${VID_desc[$index]}"
        elif [[ $line =~ targetUrl ]]; then
            URL=$(echo $line | sed 's/<[\/]*targetUrl>//g')
            VID_urls[$index]="${PREFIX}${URL}"
            # echo -e "\t${VID_urls[$index]}"
        elif [[ $line =~ "<endDate>" ]]; then
            read line
            date=${line%%T*}
            year=$(echo $date | awk -F '-' '{print$1}')
            month=$(echo $date | awk -F '-' '{print$2}')
            day=$(echo $date | awk -F '-' '{print$3}')
            (( day+=-7 ))
            if [[ $day -le 0 ]]; then
                (( month-- ))
                (( $month == 0 )) && (( year-- )) && month=12
                if [[ $month =~ (1|3|5|7|8|10|12) ]]; then
                    (( day+=31 ))
                elif [[ $month =~ (4|6|9|11) ]]; then
                    (( day+=30 ))
                elif [[ $(( $year % 4)) != 0 ]]; then
                    (( day+=28 ))
                else
                    (( day+=29 ))
                fi
            fi
            VID_date[$index]=$(printf "%02d-%02d-%04d\n" $day $month $year)
            (( index++ ))
        fi
        # echo $(( $index + 1 )). $line; 
        # (( index++ )); 
    done < ${TMP_FILE}
    VID_numb=$index
fi
VID_empty=0
}

function update_array() {
VID_empty=1 && create_array
}

function print_choice_list {
if (( $VID_empty )); then
    create_array
fi
echo  -e "\n===================================================="
echo  -e "*                AVAILABLE VIDEOS                  *"                
echo  -e "====================================================\n"
for index in ${!VID_title[@]}; do
[[ $2 ]] && echo -e "$index. \t${VID_title[$index]}" || echo -e "$index. \t${VID_date[$index]} \t${VID_title[$index]}"
#    echo -e "\t${VID_desc[$index]}"
done
}

function summary {
    print_choice_list false
}

###################################################
# GENERAL FORMAT FUNCTION :
# * create_format_array (create all the arrays containing important informations on the format of
# given video)
# * update_format_array (update arrays of informations)
# * print_format_list (prints all the format of the desired video)


function create_format_array {
if (( $FORM_empty )); then
    local url=$1
    local json_url=$(wget  "$url" -O- -q | grep video-container | sed -n 1p | sed -n 1p | sed 's/.*url="\([a-zA-Z0-9:_\/\.-]*\)">/\1/g')
    local index=1

    wget  "$json_url" -O- -q | tr "," "\n" | grep -E '(RTMP.*quality|url":"geo|streamer":"rtmp)' | grep -vE "_V[a-zA-Z]*A[_-]" > $TMP_FORMAT_FILE
    while read line; do
        info=${line##*:}
        # echo $info
        if [[ $line =~ quality ]]; then
            # echo "1. Quality : $info, $index"
            FORM_title[$index]=$info
        elif [[ $line =~ streamer ]]; then
            info=${info#*//}
            # echo "2. Streamer : $info, $index"
            FORM_location[$index]=${info%%/*}
            tmp="${info#*/}"
            FORM_app[$index]=${tmp%/*}
        elif [[ $line =~ url ]]; then
            # echo "3. Url : $info, $index"
            FORM_urls[$index]=mp4:$(echo $info | awk -F '"' '{print$2}')
            (( index++ ))
        fi
    done < $TMP_FORMAT_FILE
    FORM_empty=0
    FORM_numb=$index
fi
}

function update_format_array {
FORM_empty=1 && create_format_array $1
}

function print_format_list {
local index=$1
(( $VID_empty )) && update_array
if [[ -z "${index##*[!0-9]*}" || $index -le 0 || $index -ge $VID_numb ]]; then
    echo "Bad index : ${index}."
    return 1
fi
update_format_array ${VID_urls[$1]}

echo -e "\n| Formats"
echo -e "|-----------------------\n"
for index in ${!FORM_title[@]}; do
    echo "$index. ${FORM_title[$index]}"
    # echo -e "\t$(echo ${FORM_urls[$index]})"
done
}

############################################################
# GENERAL FUNCTION
# * quit (quit the script)
# * help (print all available function)
# * desc (print description of a video)
# * download

function quit {
LOOP=0
}

function help {
local ret=$(declare -F | awk '{print$3}')
echo $ret
}

function desc {
choice=$1
(( $VID_empty )) && update_array
if [[ -z "${choice##*[!0-9]*}" || $choice -le 0 || $choice -ge $VID_numb ]]; then
    echo "Bad Choice : ${choice}."
    return 1
fi

echo -e "\n| Description (${VID_title[$choice]})"
echo -e "|----------------------------------------------------------------------\n"

echo "${VID_desc[$choice]}"
}

function download {
#choice=$(echo $1 | awk '{print$1}')
choice=$1
if [[ $1 != "" ]]; then
    (( VID_empty )) && update_array
    if [[ -z "${choice##*[!0-9]*}" || $choice -le 0 || $choice -ge $VID_numb ]]; then
        echo "Bad Choice : ${choice}."
        return 1
    fi
else
    print_choice_list
    echo -ne "\nChoose a Video : "
    read choice line
    
    while [[ -z "${choice##*[!0-9]*}" || $choice -le 0 || $choice -ge $VID_numb ]]; do 
        echo "Bad Choice : $choice"
        echo -ne "\nChoose a Video : "
        read choice line
    done
fi

print_format_list $choice
echo -ne "\nChoose a quality : "
read qchoice line

while [[ -z "${qchoice##*[!0-9]*}" || $qchoice -le 0 || $qchoice -ge $FORM_numb ]]; do 
    [[ $qchoice == "q" ]] && echo "Canceling..." && return 1
    echo "Bad Choice : ${qchoice}"
    echo -ne "\nChoose a quality : "
    read qchoice line
done

local filename=${DL_DIR}/${VID_title[$choice]}_${VID_date[$choice]}.flv
if [ -e "$filename" ]; then
    echo "The files already exists..."
    echo "Aborting download..."
    return 1
fi

local request="rtmpdump --host ${FORM_location[$qchoice]} --protocol rtmp --port 1935\
    --app ${FORM_app[$qchoice]} --playpath ${FORM_urls[$qchoice]} \
    -o $filename"
echo "$request"
$request
}

function print_url {
choice=$1
(( $VID_empty )) && update_array
if [[ -z "${choice##*[!0-9]*}" || $choice -le 0 || $choice -ge $VID_numb ]]; then
    echo "Bad Choice : ${choice}."
    return 1
fi

echo "${FORM_urls[$choice]}"
}

while (( $LOOP )); do
    echo -ne "\nEnter an action : "
    read comm line
    declare -f $comm > /dev/null
    if [[ $? == 0 ]]; then
        $comm $line
    else
        echo $(help)
    fi
done


# print_choice_list
# echo -ne "\nChoose a Video : "
# read choice line
# 
# while [[ -z "${choice##*[!0-9]*}" || $choice -le 0 || $choice -ge $VID_numb ]]; do 
#     echo "Bad Choice : $choice"
#     echo -ne "\nChoose a Video : "
#     read choice line
# done
# 
# print_format_list "${VID_urls[$choice]}"
# echo -ne "\nChoose a quality : "
# read qchoice line
# 
# while [[ -z "${qchoice##*[!0-9]*}" || $qchoice -le 0 || $qchoice -ge $FORM_numb ]]; do 
#     echo "Bad Choice : $qchoice"
#     echo -ne "\nChoose a quality : "
#     read qchoice line
# done
# 
# echo "rtmpdump --host ${FORM_location[$qchoice]} --protocol rtmp --port 1935\
#     --app ${FORM_app[$qchoice]} --playpath ${FORM_urls[$index]} \
#     -o \"/tmp/${VID_title[$choice]}_${VID_date[$choice]}.flv\""
